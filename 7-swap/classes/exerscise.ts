class User {
  constructor(
    public skills: string[] = [],
  ) {}

  addSkill(skill: string): void;
  addSkill(skill: string[]): void;
  addSkill(skill: string | string[]): void {
    if (typeof skill === 'string') {
      this.skills.push(skill);
    } else {
      this.skills = this.skills.concat(skill);
    }
  }
}


// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É (Cart) –Ω–∞ —Å–∞–π—Ç–µ,

// –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Product), –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É

// –∏ –ø–µ—Ä–µ–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (Delivery). –î–ª—è Cart —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã:

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ ID
// –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
// –ó–∞–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
// Checkout - –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ –≤—Å—ë –æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏
// Product: id, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞

// Delivery: –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –¥–æ –¥–æ–º–∞ (–¥–∞—Ç–∞ –∏ –∞–¥—Ä–µ—Å) –∏–ª–∏ –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ (–¥–∞—Ç–∞ = –°–µ–≥–æ–¥–Ω—è –∏ Id –º–∞–≥–∞–∑–∏–Ω–∞)

class Product {
  constructor(
    public id: number,
    public title: string,
    public price: number,
  ) {}
}

class Delivery {
  constructor(
    public data: Date,
  ) {}
}

class HomeDelivery extends Delivery {
  constructor(date: Date, public address: Date) {
    super(date);
  }
}

class ShopDelivery extends Delivery {
  constructor(public storeId: number) {
    super(new Date());
  }
}

type DeliveryChoice = HomeDelivery | ShopDelivery;

class Cart {
  constructor(
    private _products: Product[] = [],
    private _delivery?: DeliveryChoice,
  ) {}

  addProduct(item: Product): void {
    this._products.push(item);
  }

  removeProductByID(id: number): void {
    this._products = this._products.filter((item) => item.id != id);
  }

  countOrderPrice(): number {
    return this._products.reduce((sum, item) => sum + item.price, 0)
  }

  chooseDelivery(delivery: DeliveryChoice): void {
    this._delivery = delivery;
  }

  checkOut() {
    if (this._products.length === 0) {
      throw Error('Cart has no products');
    }

    if (!this._delivery) {
      throw Error('Cart has no chosen delivery option');
    }
    return { status: 'success' };
  }
}

const cart = new Cart();

cart.addProduct({ id: 1, title: 'Cookie1', price: 100 });
cart.addProduct({ id: 2, title: 'Cookie2', price: 200 });
cart.addProduct({ id: 3, title: 'Cookie3', price: 300 });

cart.countOrderPrice();
console.log("üöÄ ~ cart.countOrderPrice();:", cart.countOrderPrice());
cart.checkOut();
cart.chooseDelivery(new ShopDelivery(5));
console.log(cart.checkOut());

// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Logger —Å 2-–º—è –º–µ—Ç–æ–¥–∞–º–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º - log(message): void –∏ printDate - –≤—ã–≤–æ–¥—è—â–∏–π –≤ log –¥–∞—Ç—É.
// –ö –Ω–µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã –∏–º–µ–ª –º–µ—Ç–æ–¥: logWithDate,–≤—ã–≤–æ–¥—è—â–∏–π —Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç—É, –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

abstract class Logger {
  abstract log(message: string): void;

  printDate() {
    this.log(new Date().toString());
  }
}

class RealLogger extends Logger {
  log(message: string): void {
    console.log(message);
  }

  logWithDate(message: string) {
    this.printDate();
    this.log(message);
  }
}
